# FLASK

#
# Define the security object classes 
#

class security
class process
class system
class capability

# file-related classes
class filesystem
class file
class dir
class fd
class lnk_file
class chr_file
class blk_file
class sock_file
class fifo_file

# network-related classes
class socket
class tcp_socket
class udp_socket
class rawip_socket
class node
class netif
class netlink_socket
class packet_socket
class key_socket
class unix_stream_socket
class unix_dgram_socket

# sysv-ipc-related classes
class sem
class msg
class msgq
class shm
class ipc

#
# userspace object manager classes
#

# passwd/chfn/chsh
class passwd

# SE-X Windows stuff
class drawable
class window
class gc
class font
class colormap
class property
class cursor
class xclient
class xinput
class xserver
class xextension

# pax flags
class pax

# extended netlink sockets
class netlink_route_socket
class netlink_firewall_socket
class netlink_tcpdiag_socket
class netlink_nflog_socket
class netlink_xfrm_socket
class netlink_selinux_socket
class netlink_audit_socket
class netlink_ip6fw_socket
class netlink_dnrt_socket

class dbus
class nscd

# IPSec association
class association

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket

# FLASK
# FLASK

#
# Define initial security identifiers 
#

sid kernel
sid security
sid unlabeled
sid fs
sid file
sid file_labels
sid init
sid any_socket
sid port
sid netif
sid netmsg
sid node
sid igmp_packet
sid icmp_socket
sid tcp_socket
sid sysctl_modprobe
sid sysctl
sid sysctl_fs
sid sysctl_kernel
sid sysctl_net
sid sysctl_net_unix
sid sysctl_vm
sid sysctl_dev
sid kmod
sid policy
sid scmp_packet
sid devnull

# FLASK
#
# Define common prefixes for access vectors
#
# common common_name { permission_name ... }


#
# Define a common prefix for file access vectors.
#

common file
{
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
	unlink
	link
	rename
	execute
	swapon
	quotaon
	mounton
}


#
# Define a common prefix for socket access vectors.
#

common socket
{
# inherited from file
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
# socket-specific
	bind
	connect
	listen
	accept
	getopt
	setopt
	shutdown
	recvfrom
	sendto
	recv_msg
	send_msg
	name_bind
}	

#
# Define a common prefix for ipc access vectors.
#

common ipc
{
	create
	destroy
	getattr
	setattr
	read
	write
	associate
	unix_read
	unix_write
}

#
# Define the access vectors.
#
# class class_name [ inherits common_name ] { permission_name ... }


#
# Define the access vector interpretation for file-related objects.
#

class filesystem
{
	mount
	remount
	unmount
	getattr
	relabelfrom
	relabelto
	transition
	associate
	quotamod
	quotaget
}

class dir
inherits file
{
	add_name
	remove_name
	reparent
	search
	rmdir
}

class file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
}

class lnk_file
inherits file

class chr_file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
}

class blk_file
inherits file

class sock_file
inherits file

class fifo_file
inherits file

class fd
{
	use
}


#
# Define the access vector interpretation for network-related objects.
#

class socket
inherits socket

class tcp_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
	node_bind
	name_connect
}

class udp_socket
inherits socket
{
	node_bind
}

class rawip_socket
inherits socket
{
	node_bind
}

class node 
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
	enforce_dest
}

class netif
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
}

class netlink_socket
inherits socket

class packet_socket
inherits socket

class key_socket
inherits socket

class unix_stream_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
}

class unix_dgram_socket
inherits socket


#
# Define the access vector interpretation for process-related objects
#

class process
{
	fork
	transition
	sigchld # commonly granted from child to parent
	sigkill # cannot be caught or ignored
	sigstop # cannot be caught or ignored
	signull # for kill(pid, 0)
	signal  # all other signals
	ptrace
	getsched
	setsched
	getsession
	getpgid
	setpgid
	getcap
	setcap
	share
	getattr
	setexec
	setfscreate
	noatsecure
	siginh
	setrlimit
	rlimitinh
	dyntransition
	setcurrent
	execmem
	execstack
	execheap
}


#
# Define the access vector interpretation for ipc-related objects
#

class ipc
inherits ipc

class sem
inherits ipc

class msgq
inherits ipc
{
	enqueue
}

class msg
{
	send
	receive
}

class shm
inherits ipc
{
	lock
}


#
# Define the access vector interpretation for the security server. 
#

class security
{
	compute_av
	compute_create
	compute_member
	check_context
	load_policy
	compute_relabel
	compute_user
	setenforce     # was avc_toggle in system class
	setbool
	setsecparam
	setcheckreqprot
}


#
# Define the access vector interpretation for system operations.
#

class system
{
	ipc_info
	syslog_read  
	syslog_mod
	syslog_console
}

#
# Define the access vector interpretation for controling capabilies
#

class capability
{
	# The capabilities are defined in include/linux/capability.h
	# Care should be taken to ensure that these are consistent with
	# those definitions. (Order matters)

	chown           
	dac_override    
	dac_read_search 
	fowner          
	fsetid          
	kill            
	setgid           
	setuid           
	setpcap          
	linux_immutable  
	net_bind_service 
	net_broadcast    
	net_admin        
	net_raw          
	ipc_lock         
	ipc_owner        
	sys_module       
	sys_rawio        
	sys_chroot       
	sys_ptrace       
	sys_pacct        
	sys_admin        
	sys_boot         
	sys_nice         
	sys_resource     
	sys_time         
	sys_tty_config  
	mknod
	lease
	audit_write
	audit_control
}


#
# Define the access vector interpretation for controlling
# changes to passwd information.
#
class passwd
{
	passwd	# change another user passwd
	chfn	# change another user finger info
	chsh	# change another user shell
	rootok  # pam_rootok check (skip auth)
	crontab # crontab on another user
}

#
# SE-X Windows stuff
#
class drawable
{
	create
	destroy
	draw
	copy
	getattr
}

class gc
{
	create
	free
	getattr
	setattr
}

class window 
{
	addchild
	create
	destroy
	map
	unmap
	chstack
	chproplist
	chprop	
	listprop
	getattr
	setattr
	setfocus
	move
	chselection
	chparent
	ctrllife
	enumerate
	transparent
	mousemotion
	clientcomevent
	inputevent
	drawevent
	windowchangeevent
	windowchangerequest
	serverchangeevent
	extensionevent
}

class font
{
	load
	free
	getattr
	use
}

class colormap
{
	create
	free
	install
	uninstall
	list
	read
	store
	getattr
	setattr
}

class property
{
	create
	free
	read
	write
}

class cursor
{
	create
	createglyph
	free
	assign
	setattr
}

class xclient
{
	kill
}

class xinput
{
	lookup
	getattr
	setattr
	setfocus
	warppointer
	activegrab
	passivegrab
	ungrab
	bell
	mousemotion
	relabelinput
}

class xserver
{
	screensaver
	gethostlist
	sethostlist
	getfontpath
	setfontpath
	getattr
	grab
	ungrab
}

class xextension
{
	query
	use
}

#
# Define the access vector interpretation for controlling
# PaX flags
#
class pax
{
        pageexec        # Paging based non-executable pages
        emutramp        # Emulate trampolines
        mprotect        # Restrict mprotect()
        randmmap        # Randomize mmap() base
        randexec        # Randomize ET_EXEC base
        segmexec        # Segmentation based non-executable pages
}

#
# Extended Netlink classes
#
class netlink_route_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_firewall_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_tcpdiag_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_nflog_socket
inherits socket

class netlink_xfrm_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_selinux_socket
inherits socket

class netlink_audit_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
	nlmsg_relay
	nlmsg_readpriv
}

class netlink_ip6fw_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_dnrt_socket
inherits socket

# Define the access vector interpretation for controlling
# access and communication through the D-BUS messaging
# system.
#
class dbus
{
	acquire_svc
	send_msg
}

# Define the access vector interpretation for controlling
# access through the name service cache daemon (nscd).
#
class nscd
{
	getpwd
	getgrp
	gethost
	getstat
	admin
       shmempwd
       shmemgrp
       shmemhost
}

# Define the access vector interpretation for controlling
# access to IPSec network data by association
#
class association
{
       sendto
       recvfrom
}

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket
inherits socket
#
# Define sensitivities 
#
# Each sensitivity has a name and zero or more aliases.
#
sensitivity s0;
sensitivity s1;
sensitivity s2;
sensitivity s3;
sensitivity s4;
sensitivity s5;
sensitivity s6;
sensitivity s7;
sensitivity s8;
sensitivity s9;


#
# Define the ordering of the sensitivity levels (least to greatest)
#
dominance { s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 }


#
# Define the categories
#
# Each category has a name and zero or more aliases.
#
category c0;
category c1;
category c2;
category c3;
category c4;
category c5;
category c6;
category c7;
category c8;
category c9;
category c10;
category c11;
category c12;
category c13;
category c14;
category c15;
category c16;
category c17;
category c18;
category c19;
category c20;
category c21;
category c22;
category c23;
category c24;
category c25;
category c26;
category c27;
category c28;
category c29;
category c30;
category c31;
category c32;
category c33;
category c34;
category c35;
category c36;
category c37;
category c38;
category c39;
category c40;
category c41;
category c42;
category c43;
category c44;
category c45;
category c46;
category c47;
category c48;
category c49;
category c50;
category c51;
category c52;
category c53;
category c54;
category c55;
category c56;
category c57;
category c58;
category c59;
category c60;
category c61;
category c62;
category c63;
category c64;
category c65;
category c66;
category c67;
category c68;
category c69;
category c70;
category c71;
category c72;
category c73;
category c74;
category c75;
category c76;
category c77;
category c78;
category c79;
category c80;
category c81;
category c82;
category c83;
category c84;
category c85;
category c86;
category c87;
category c88;
category c89;
category c90;
category c91;
category c92;
category c93;
category c94;
category c95;
category c96;
category c97;
category c98;
category c99;
category c100;
category c101;
category c102;
category c103;
category c104;
category c105;
category c106;
category c107;
category c108;
category c109;
category c110;
category c111;
category c112;
category c113;
category c114;
category c115;
category c116;
category c117;
category c118;
category c119;
category c120;
category c121;
category c122;
category c123;
category c124;
category c125;
category c126;
category c127;


#
# Each MLS level specifies a sensitivity and zero or more categories which may
# be associated with that sensitivity.
#
level s0:c0.c127;
level s1:c0.c127;
level s2:c0.c127;
level s3:c0.c127;
level s4:c0.c127;
level s5:c0.c127;
level s6:c0.c127;
level s7:c0.c127;
level s8:c0.c127;
level s9:c0.c127;


#
# Define the MLS policy
#
# mlsconstrain class_set perm_set expression ;
#
# mlsvalidatetrans class_set expression ;
#
# expression : ( expression )
#	     | not expression
#	     | expression and expression
#	     | expression or expression
#	     | u1 op u2
#	     | r1 role_mls_op r2
#	     | t1 op t2
#	     | l1 role_mls_op l2
#	     | l1 role_mls_op h2
#	     | h1 role_mls_op l2
#	     | h1 role_mls_op h2
#	     | l1 role_mls_op h1
#	     | l2 role_mls_op h2
#	     | u1 op names
#	     | u2 op names
#	     | r1 op names
#	     | r2 op names
#	     | t1 op names
#	     | t2 op names
#	     | u3 op names (NOTE: this is only available for mlsvalidatetrans)
#	     | r3 op names (NOTE: this is only available for mlsvalidatetrans)
#	     | t3 op names (NOTE: this is only available for mlsvalidatetrans)
#
# op : == | !=
# role_mls_op : == | != | eq | dom | domby | incomp
#
# names : name | { name_list }
# name_list : name | name_list name
#

#
# MLS policy for the file classes
#

# make sure these file classes are "single level"
mlsconstrain { file lnk_file fifo_file } { create relabelto }
	( l2 eq h2 );

# new file labels must be dominated by the relabeling subject's clearance
mlsconstrain { dir file lnk_file chr_file blk_file sock_file fifo_file } relabelto
	( h1 dom h2 );

# the file "read" ops (note the check is dominance of the low level)
mlsconstrain { dir file lnk_file chr_file blk_file sock_file fifo_file } { read getattr execute }
	(( l1 dom l2 ) or
	 (( t1 == mlsfilereadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsfileread ) or
	 ( t2 == mlstrustedobject ));

mlsconstrain dir search
	(( l1 dom l2 ) or
	 (( t1 == mlsfilereadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsfileread ) or
	 ( t2 == mlstrustedobject ));

# the "single level" file "write" ops
mlsconstrain { file lnk_file fifo_file } { write create setattr relabelfrom append unlink link rename mounton }
	(( l1 eq l2 ) or
	 (( t1 == mlsfilewritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsfilewrite ) or
	 ( t2 == mlstrustedobject ));

# the "ranged" file "write" ops
mlsconstrain { dir chr_file blk_file sock_file } { write create setattr relabelfrom append unlink link rename mounton }
	((( l1 dom l2 ) and ( l1 domby h2 )) or
	 (( t1 == mlsfilewritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsfilewrite ) or
	 ( t2 == mlstrustedobject ));

mlsconstrain dir { add_name remove_name reparent rmdir }
	((( l1 dom l2 ) and ( l1 domby h2 )) or
	 (( t1 == mlsfilewritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsfilewrite ) or
	 ( t2 == mlstrustedobject ));

# these access vectors have no MLS restrictions
# { dir file lnk_file chr_file blk_file sock_file fifo_file } { ioctl lock swapon quotaon }
#
# { file chr_file } { execute_no_trans entrypoint execmod }

# the file upgrade/downgrade rule
mlsvalidatetrans { dir file lnk_file chr_file blk_file sock_file fifo_file }
	((( l1 eq l2 ) or
	  (( t3 == mlsfileupgrade ) and ( l1 domby l2 )) or
	  (( t3 == mlsfiledowngrade ) and ( l1 dom l2 )) or
	  (( t3 == mlsfiledowngrade ) and ( l1 incomp l2 ))) and
	 (( h1 eq h2 ) or
	  (( t3 == mlsfileupgrade ) and ( h1 domby h2 )) or
	  (( t3 == mlsfiledowngrade ) and ( h1 dom h2 )) or
	  (( t3 == mlsfiledowngrade ) and ( h1 incomp h2 ))));

# create can also require the upgrade/downgrade checks if the creating process
# has used setfscreate (note that both the high and low level of the object
# default to the process' sensitivity level)
mlsconstrain { dir file lnk_file chr_file blk_file sock_file fifo_file } create
	((( l1 eq l2 ) or
	  (( t1 == mlsfileupgrade ) and ( l1 domby l2 )) or
	  (( t1 == mlsfiledowngrade ) and ( l1 dom l2 )) or
	  (( t1 == mlsfiledowngrade ) and ( l1 incomp l2 ))) and
	 (( l1 eq h2 ) or
	  (( t1 == mlsfileupgrade ) and ( l1 domby h2 )) or
	  (( t1 == mlsfiledowngrade ) and ( l1 dom h2 )) or
	  (( t1 == mlsfiledowngrade ) and ( l1 incomp h2 ))));




#
# MLS policy for the filesystem class
#

# new filesystem labels must be dominated by the relabeling subject's clearance
mlsconstrain filesystem relabelto
	( h1 dom h2 );

# the filesystem "read" ops (implicit single level)
mlsconstrain filesystem { getattr quotaget }
	(( l1 dom l2 ) or
	 (( t1 == mlsfilereadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsfileread ));

# all the filesystem "write" ops (implicit single level)
mlsconstrain filesystem { mount remount unmount relabelfrom quotamod }
	(( l1 eq l2 ) or
	 (( t1 == mlsfilewritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsfilewrite ));

# these access vectors have no MLS restrictions
# filesystem { transition associate }




#
# MLS policy for the socket classes
#

# new socket labels must be dominated by the relabeling subject's clearance
mlsconstrain { socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket } relabelto
	( h1 dom h2 );

# the socket "read" ops (note the check is dominance of the low level)
mlsconstrain { socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket } { read getattr listen accept getopt recvfrom recv_msg }
	(( l1 dom l2 ) or
	 (( t1 == mlsnetreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsnetread ));

mlsconstrain { netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_xfrm_socket netlink_audit_socket netlink_ip6fw_socket } nlmsg_read
	(( l1 dom l2 ) or
	 (( t1 == mlsnetreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsnetread ));

# the socket "write" ops
mlsconstrain { socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket } { write setattr relabelfrom connect setopt shutdown }
	((( l1 dom l2 ) and ( l1 domby h2 )) or
	 (( t1 == mlsnetwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsnetwrite ));

# these access vectors have no MLS restrictions
# { socket tcp_socket udp_socket rawip_socket netlink_socket packet_socket key_socket unix_stream_socket unix_dgram_socket netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_nflog_socket netlink_xfrm_socket netlink_selinux_socket netlink_audit_socket netlink_ip6fw_socket netlink_dnrt_socket } { ioctl create lock append bind sendto send_msg name_bind }
#
# { tcp_socket udp_socket rawip_socket } node_bind
#
# { tcp_socket unix_stream_socket } { connectto newconn acceptfrom }
#
# { netlink_route_socket netlink_firewall_socket netlink_tcpdiag_socket netlink_xfrm_socket netlink_audit_socket netlink_ip6fw_socket } nlmsg_write
#




#
# MLS policy for the ipc classes
#

# the ipc "read" ops (implicit single level)
mlsconstrain { ipc sem msgq shm } { getattr read unix_read }
	(( l1 dom l2 ) or
	 (( t1 == mlsipcreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsipcread ));

mlsconstrain msg receive
	(( l1 dom l2 ) or
	 (( t1 == mlsipcreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsipcread ));

# the ipc "write" ops (implicit single level)
mlsconstrain { ipc sem msgq shm } { create destroy setattr write unix_write }
	(( l1 eq l2 ) or
	 (( t1 == mlsipcwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsipcwrite ));

mlsconstrain msgq enqueue
	(( l1 eq l2 ) or
	 (( t1 == mlsipcwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsipcwrite ));

mlsconstrain shm lock
	(( l1 eq l2 ) or
	 (( t1 == mlsipcwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsipcwrite ));

mlsconstrain msg send
	(( l1 eq l2 ) or
	 (( t1 == mlsipcwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsipcwrite ));

# these access vectors have no MLS restrictions
# { ipc sem msgq shm } associate




#
# MLS policy for the fd class
#

# these access vectors have no MLS restrictions
# fd use




#
# MLS policy for the network object classes
#

# the netif/node "read" ops (implicit single level socket doing the read)
#                           (note the check is dominance of the low level)
mlsconstrain { node netif } { tcp_recv udp_recv rawip_recv }
	(( l1 dom l2 ) or ( t1 == mlsnetrecvall ));

# the netif/node "write" ops (implicit single level socket doing the write)
mlsconstrain { netif node } { tcp_send udp_send rawip_send }
	(( l1 dom l2 ) and ( l1 domby h2 ));

# these access vectors have no MLS restrictions
# { netif node } { enforce_dest }




#
# MLS policy for the process class
#

# new process labels must be dominated by the relabeling subject's clearance
# and sensitivity level changes require privilege
mlsconstrain process transition
	(( h1 dom h2 ) and
	 (( l1 eq l2 ) or ( t1 == mlsprocsetsl ) or
	  (( t1 == privrangetrans ) and ( t2 == mlsrangetrans ))));
mlsconstrain process dyntransition
	(( h1 dom h2 ) and
	 (( l1 eq l2 ) or ( t1 == mlsprocsetsl )));

# all the process "read" ops
mlsconstrain process { getsched getsession getpgid getcap getattr ptrace share }
	(( l1 dom l2 ) or
	 (( t1 == mlsprocreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsprocread ));

# all the process "write" ops (note the check is equality on the low level)
mlsconstrain process { sigkill sigstop signal setsched setpgid setcap setexec setfscreate setcurrent ptrace share }
	(( l1 eq l2 ) or
	 (( t1 == mlsprocwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsprocwrite ));

# these access vectors have no MLS restrictions
# process { fork sigchld signull noatsecure siginh setrlimit rlimitinh execmem }




#
# MLS policy for the security class
#

# these access vectors have no MLS restrictions
# security *




#
# MLS policy for the system class
#

# these access vectors have no MLS restrictions
# system *




#
# MLS policy for the capability class
#

# these access vectors have no MLS restrictions
# capability *




#
# MLS policy for the passwd class
#

# these access vectors have no MLS restrictions
# passwd *




#
# MLS policy for the drawable class
#

# the drawable "read" ops (implicit single level)
mlsconstrain drawable { getattr copy }
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the drawable "write" ops (implicit single level)
mlsconstrain drawable { create destroy draw copy }
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));




#
# MLS policy for the gc class
#

# the gc "read" ops (implicit single level)
mlsconstrain gc getattr
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the gc "write" ops (implicit single level)
mlsconstrain gc { create free setattr }
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));




#
# MLS policy for the window class
#

# the window "read" ops (implicit single level)
mlsconstrain window { listprop getattr enumerate mousemotion inputevent drawevent windowchangeevent windowchangerequest serverchangeevent extensionevent }
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the window "write" ops (implicit single level)
mlsconstrain window { addchild create destroy chstack chproplist chprop setattr setfocus move chselection chparent ctrllife transparent clientcomevent }
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));

# these access vectors have no MLS restrictions
# window { map unmap }




#
# MLS policy for the font class
#

# the font "read" ops (implicit single level)
mlsconstrain font { load getattr }
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the font "write" ops (implicit single level)
mlsconstrain font free
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));

# these access vectors have no MLS restrictions
# font use




#
# MLS policy for the colormap class
#

# the colormap "read" ops (implicit single level)
mlsconstrain colormap { list read getattr }
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the colormap "write" ops (implicit single level)
mlsconstrain colormap { create free install uninstall store setattr }
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));




#
# MLS policy for the property class
#

# the property "read" ops (implicit single level)
mlsconstrain property { read }
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the property "write" ops (implicit single level)
mlsconstrain property { create free write }
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));




#
# MLS policy for the cursor class
#

# the cursor "write" ops (implicit single level)
mlsconstrain cursor { create createglyph free assign setattr }
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));




#
# MLS policy for the xclient class
#

# the xclient "write" ops (implicit single level)
mlsconstrain xclient kill
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));




#
# MLS policy for the xinput class
#

# the xinput "read" ops (implicit single level)
mlsconstrain xinput { lookup getattr mousemotion }
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the xinput "write" ops (implicit single level)
mlsconstrain xinput { setattr setfocus warppointer activegrab passivegrab ungrab bell relabelinput }
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));




#
# MLS policy for the xserver class
#

# the xserver "read" ops (implicit single level)
mlsconstrain xserver { gethostlist getfontpath getattr screensaver }
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the xserver "write" ops (implicit single level)
mlsconstrain xserver { sethostlist setfontpath grab ungrab screensaver }
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));




#
# MLS policy for the xextension class
#

# the xextension "read" ops (implicit single level)
mlsconstrain xextension query
	(( l1 dom l2 ) or
	 (( t1 == mlsxwinreadtoclr ) and ( h1 dom l2 )) or
	 ( t1 == mlsxwinread ));

# the xextension "write" ops (implicit single level)
mlsconstrain xextension use
	(( l1 eq l2 ) or
	 (( t1 == mlsxwinwritetoclr ) and ( h1 dom l2 ) and ( l1 domby l2 )) or
	 ( t1 == mlsxwinwrite ));


#
# MLS policy for the pax class
#

# these access vectors have no MLS restrictions
# pax { pageexec emutramp mprotect randmmap randexec segmexec }




#
# MLS policy for the dbus class
#

# these access vectors have no MLS restrictions
# dbus { acquire_svc send_msg }




#
# MLS policy for the nscd class
#

# these access vectors have no MLS restrictions
# nscd { getpwd getgrp gethost getstat admin shmempwd shmemgrp shmemhost }




#
# MLS policy for the association class
#

# these access vectors have no MLS restrictions
# association { sendto recvfrom }

##############################################
### insert here XXX #########################

###############
###ATTRIB
#defined
attribute domain;
attribute file_type;

#mls attributes
attribute mlsfilereadtoclr;
attribute mlsfilewritetoclr;
attribute mlsnetreadtoclr;
attribute mlsnetwritetoclr;
attribute mlsipcreadtoclr;
attribute mlsipcwritetoclr;
attribute mlsprocreadtoclr;
attribute mlsprocwritetoclr;
attribute mlsxwinreadtoclr;
attribute mlsxwinwritetoclr;
attribute mlsfileread;
attribute mlsfilewrite;
attribute mlsnetread;
attribute mlsnetwrite;
attribute mlsipcread;
attribute mlsipcwrite;
attribute mlsprocread;
attribute mlsprocwrite;
attribute mlsxwinread;
attribute mlsxwinwrite;
attribute mlstrustedobject;
attribute mlsfileupgrade;
attribute mlsfiledowngrade;
attribute mlsnetrecvall;
attribute mlsprocsetsl;
attribute privrangetrans;
attribute mlsrangetrans;

#custom
attribute port_a;
attribute device_a;
attribute fs_a;
attribute node_a;
attribute user_dom_a;
attribute user_data_a;
attribute empty_a;
attribute foo_a;
attribute exec_a;


###############
###TYPES

#base types
type kernel_t, domain;
type security_t;
type unlabeled_t;
type fs_t, fs_a;
type file_t, file_type;
type netif_t;
type null_device_t, device_a;
type devpts_t;
type sysctl_t;
type bdev_t;
type mtrr_device_t;

#filesystem types
type tmpfs_t, fs_a;
type root_t, fs_a;
type sysfs_t, fs_a;
type autofs_t, fs_a;
type usbdevfs_t, fs_a;
type iso9660_t, fs_a;
type romfs_t, fs_a;
type ramfs_t, fs_a;
type dosfs_t, fs_a;
type cifs_t, fs_a;
type nfs_t, fs_a;
type debugfs_t, fs_a;
type inotifyfs_t, fs_a;
type hugetlbfs_t, fs_a;
type capifs_t, fs_a;
type eventpollfs_t, fs_a;
type futexfs_t, fs_a;
type usbfs_t, fs_a;
type nfsd_fs_t, fs_a;
type rpc_pipefs_t, fs_a;
type binfmt_misc_fs_t, fs_a;

#types for stuff in proc/sys
type sysctl_modprobe_t;
type sysctl_hotplug_t;
type sysctl_net_t;
type sysctl_net_unix_t;
type sysctl_vm_t;
type sysctl_dev_t;
type sysctl_rpc_t;
type sysctl_irq_t;
type sysctl_kernel_t;

#port types
type port_t, port_a;
type portmap_port_t, port_a;
type inetd_child_port_t, port_a;
type auth_port_t, port_a;
type ftp_data_port_t, port_a;
type ftp_port_t, port_a;
type ssh_port_t, port_a;
type telnetd_port_t, port_a;
type smtp_port_t, port_a;
type isakmp_port_t, port_a;
type dns_port_t, port_a;
type dhcpd_port_t, port_a;
type dhcpc_port_t, port_a;
type gopher_port_t, port_a;
type tftp_port_t, port_a;
type fingerd_port_t, port_a;
type http_port_t, port_a;
type pop_port_t, port_a;
type innd_port_t, port_a;
type ntp_port_t, port_a;
type smbd_port_t, port_a;
type nmbd_port_t, port_a;
type snmp_port_t, port_a;
type comsat_port_t, port_a;
type ldap_port_t, port_a;
type rlogind_port_t, port_a;
type rsh_port_t, port_a;
type printer_port_t, port_a;
type syslogd_port_t, port_a;
type ktalkd_port_t, port_a;
type ipp_port_t, port_a;
type kerberos_port_t, port_a;
type kerberos_admin_port_t, port_a;
type kerberos_master_port_t, port_a;
type spamd_port_t, port_a;
type uucpd_port_t, port_a;
type cvs_port_t, port_a;
type rsync_port_t, port_a;
type swat_port_t, port_a;
type rndc_port_t, port_a;
type giftd_port_t, port_a;
type nessus_port_t, port_a;
type monopd_port_t, port_a;
type radius_port_t, port_a;
type radacct_port_t, port_a;
type gatekeeper_port_t, port_a;
type afs_fs_port_t, port_a;
type afs_pt_port_t, port_a;
type afs_vl_port_t, port_a;
type afs_ka_port_t, port_a;
type afs_bos_port_t, port_a;
type asterisk_port_t, port_a;
type mail_port_t, port_a;
type zebra_port_t, port_a;
type dict_port_t, port_a;
type mysqld_port_t, port_a;
type distccd_port_t, port_a;
type pxe_port_t, port_a;
type openvpn_port_t, port_a;
type imaze_port_t, port_a;
type howl_port_t, port_a;
type jabber_client_port_t, port_a;
type jabber_interserver_port_t, port_a;
type postgresql_port_t, port_a;
type ptal_port_t, port_a;
type hplip_port_t, port_a;
type vnc_port_t, port_a;
type pegasus_http_port_t, port_a;
type pegasus_https_port_t, port_a;
type xserver_port_t, port_a;
type ircd_port_t, port_a;
type soundd_port_t, port_a;
type http_cache_port_t, port_a;
type clockspeed_port_t, port_a;
type transproxy_port_t, port_a;
type amanda_port_t, port_a;
type postgrey_port_t, port_a;
type amavisd_recv_port_t, port_a;
type amavisd_send_port_t, port_a;
type clamd_port_t, port_a;
type dcc_port_t, port_a;
type pyzor_port_t, port_a;
type razor_port_t, port_a;
type zope_port_t, port_a;
type reserved_port_t, port_a;

#types for stuff in proc
type proc_t;
type proc_kmsg_t;
type proc_kcore_t;
type proc_mdstat_t;
type proc_net_t;

#node types
type node_t, node_a;
type node_lo_t, node_a;
type node_inaddr_any_t, node_a;
type node_unspec_t, node_a;
type node_multicast_t, node_a;
type node_link_local_t, node_a;
type node_site_local_t, node_a;
type node_compat_ipv4_t, node_a;
type node_mapped_ipv4_t, node_a;

#user types
type user_t, user_dom_a, domain;
type system_t, domain;
type staff_t, user_dom_a, domain;
type sysadm_t, user_dom_a, domain;
type secadm_t, user_dom_a, domain;
type unconfined_t, user_dom_a, domain;
type user_data_t, file_type, user_data_a;
type staff_data_t, file_type, user_data_a;
type sysadm_data_t, file_type, user_data_a;
type secadm_data_t, file_type, user_data_a;

#custon types
type useless_t, domain;
type no_role_domain_t, domain;
type domfile_t, domain, file_type;
type myproc_t, foo_a, domain;
type myproc_exec_t, exec_a, file_type;
type myproc_data_t, file_type;
type mnt_t;
type foo_t, foo_a;
type vim_t, domain;
type vim_exec_t, exec_a, file_type;
type load_policy_t, domain;
type load_policy_exec_t, exec_a, file_type;

###############
###ROLES
role user_r types {user_t unconfined_t foo_a domain -no_role_domain_t};
role staff_r types {staff_t unconfined_t foo_a domain -no_role_domain_t};
role secadm_r types {secadm_t unconfined_t foo_a domain -no_role_domain_t};
role sysadm_r types {sysadm_t unconfined_t foo_a domain -no_role_domain_t};
role system_r types {system_t unconfined_t kernel_t foo_a domain -no_role_domain_t};
role useless_r types useless_t;
dominance {role notype_r {role notype_r;}}

###############
###TRANSITIONS

#myproc this is valid
allow user_dom_a myproc_t : process transition;
allow user_dom_a myproc_exec_t : file {read getattr ioctl lock execute};
allow myproc_t myproc_exec_t : file entrypoint;
type_transition user_dom_a myproc_exec_t : process myproc_t;
range_transition user_dom_a myproc_exec_t s0:c1.c3 - s3:c1.c3;

#invalid transition no ep
allow staff_t useless_t : file execute;
allow staff_t useless_t : process transition;

#invalid transition no exec for user_t valid for system_t and secadm_t
allow user_t load_policy_t : process transition;
allow load_policy_t load_policy_exec_t : file entrypoint;
type_transition user_dom_a load_policy_exec_t : process load_policy_t;
allow {system_t secadm_t} load_policy_exec_t : file {read ioctl getattr lock execute};
allow {system_t secadm_t} load_policy_t : process transition;

#invalid transition no proc trans
allow vim_t vim_exec_t : file entrypoint;
allow user_dom_a vim_exec_t : file {read ioctl getattr lock execute};

#completely useless tt rule
type_transition domfile_t mnt_t : process foo_t;

###############
###AUDITING
dontaudit user_dom_a {user_data_a myproc_data_t} : file {read getattr ioctl};
auditallow secadm_t sysadm_data_t : file write;


###############
###OTHER RULES
allow empty_a file_type : file getattr;
allow {foo_a -foo_t -myproc_t} user_data_a : file read;
allow user_dom_a myproc_data_t : dir {search getattr read ioctl};
allow user_dom_a myproc_data_t : file {read getattr ioctl lock};

#some mount stuff
allow {sysadm_t system_t kernel_t} fs_a : filesystem mount;
allow {system_t kernel_t} mnt_t: dir mounton;

###############
###ASSERT
neverallow ~domain ~exec_a : file execute;

###############
###RBAC
allow system_r user_r;
allow system_r staff_r;
allow system_r secadm_r;
allow system_r sysadm_r;


###############
###USERS
user user_u roles user_r level s0 range s0 - s9:c0.c127;
user staff_u roles staff_r level s0 range s0 - s9:c0.c127;
user sysadm_u roles sysadm_r level s0 range s0 - s9:c0.c127;
user secadm_u roles secadm_r level s0 range s0 - s9:c0.c127;
user system_u roles system_r level s0 range s0 - s9:c0.c127;

###############
###CONSTRAINTS


#############################################

# FLASK

#
# Define the security context for each initial SID
# sid sidname   context

sid kernel	system_u:system_r:kernel_t:s0
sid security	system_u:object_r:security_t:s0
sid unlabeled	system_u:object_r:unlabeled_t:s0
sid fs		system_u:object_r:fs_t:s0
sid file	system_u:object_r:file_t:s0
# Persistent label mapping is gone.  This initial SID can be removed.
sid file_labels	system_u:object_r:unlabeled_t:s0
# init_t:s0 is still used, but an initial SID is no longer required.
sid init	system_u:object_r:unlabeled_t:s0
# any_socket is no longer used.
sid any_socket 	system_u:object_r:unlabeled_t:s0
sid port	system_u:object_r:port_t:s0
sid netif	system_u:object_r:netif_t:s0
# netmsg is no longer used.
sid netmsg	system_u:object_r:unlabeled_t:s0
sid node	system_u:object_r:node_t:s0
# These sockets are now labeled with the kernel SID,
# and do not require their own initial SIDs.
sid igmp_packet system_u:object_r:unlabeled_t:s0
sid icmp_socket system_u:object_r:unlabeled_t:s0
sid tcp_socket  system_u:object_r:unlabeled_t:s0
# Most of the sysctl SIDs are now computed at runtime
# from genfs_contexts, so the corresponding initial SIDs
# are no longer required.
sid sysctl_modprobe	system_u:object_r:unlabeled_t:s0
# But we still need the base sysctl initial SID as a default.
sid sysctl	system_u:object_r:sysctl_t:s0
sid sysctl_fs	system_u:object_r:unlabeled_t:s0
sid sysctl_kernel	system_u:object_r:unlabeled_t:s0
sid sysctl_net	system_u:object_r:unlabeled_t:s0
sid sysctl_net_unix	system_u:object_r:unlabeled_t:s0
sid sysctl_vm	system_u:object_r:unlabeled_t:s0
sid sysctl_dev	system_u:object_r:unlabeled_t:s0
# No longer used, can be removed.
sid kmod	system_u:object_r:unlabeled_t:s0
sid policy	system_u:object_r:unlabeled_t:s0
sid scmp_packet	system_u:object_r:unlabeled_t:s0
sid devnull	system_u:object_r:null_device_t:s0

# FLASK
#
# Define the labeling behavior for inodes in particular filesystem types.
# This information was formerly hardcoded in the SELinux module.

# Use xattrs for the following filesystem types.
# Requires that a security xattr handler exist for the filesystem.
fs_use_xattr ext2 system_u:object_r:fs_t:s0;
fs_use_xattr ext3 system_u:object_r:fs_t:s0;
fs_use_xattr xfs system_u:object_r:fs_t:s0;
fs_use_xattr jfs system_u:object_r:fs_t:s0;
fs_use_xattr reiserfs system_u:object_r:fs_t:s0;

# Use the allocating task SID to label inodes in the following filesystem
# types, and label the filesystem itself with the specified context.
# This is appropriate for pseudo filesystems that represent objects
# like pipes and sockets, so that these objects are labeled with the same
# type as the creating task.  
fs_use_task pipefs system_u:object_r:fs_t:s0;
fs_use_task sockfs system_u:object_r:fs_t:s0;

# Use a transition SID based on the allocating task SID and the
# filesystem SID to label inodes in the following filesystem types,
# and label the filesystem itself with the specified context.
# This is appropriate for pseudo filesystems like devpts and tmpfs
# where we want to label objects with a derived type.
fs_use_trans devpts system_u:object_r:devpts_t:s0;
fs_use_trans tmpfs system_u:object_r:tmpfs_t:s0;
fs_use_trans shm system_u:object_r:tmpfs_t:s0;
fs_use_trans mqueue system_u:object_r:tmpfs_t:s0;

# The separate genfs_contexts configuration can be used for filesystem 
# types that cannot support persistent label mappings or use
# one of the fixed label schemes specified here.  
# FLASK

#
# Security contexts for files in filesystems that
# cannot support xattr or use one of the fixed labeling schemes 
# specified in fs_use.
#
# Each specifications has the form:
# 	genfscon fstype pathname-prefix [ -type ] context
#
# The entry with the longest matching pathname prefix is used.
# / refers to the root directory of the file system, and
# everything is specified relative to this root directory.
# If there is no entry with a matching pathname prefix, then 
# the unlabeled initial SID is used.
#
# The optional type field specifies the file type as shown in the mode
# field by ls, e.g. use -c to match only character device files, -b
# to match only block device files.
#
# Except for proc, in 2.6 other filesystems are limited to a single entry (/)
# that covers all entries in the filesystem with a default file context.
# For proc, a pathname can be reliably generated from the proc_dir_entry
# tree.  The proc /sys entries are used for both proc inodes and for sysctl(2)
# calls. /proc/PID entries are automatically labeled based on the associated
# process.
#
# Support for other filesystem types requires corresponding code to be
# added to the kernel, either as an xattr handler in the filesystem 
# implementation (preferred, and necessary if you want to access the labels
# from userspace) or as logic in the SELinux module.

# proc (excluding /proc/PID)
genfscon proc /				system_u:object_r:proc_t:s0
genfscon proc /kmsg			system_u:object_r:proc_kmsg_t:s0
genfscon proc /kcore			system_u:object_r:proc_kcore_t:s0
genfscon proc /mdstat			system_u:object_r:proc_mdstat_t:s0
genfscon proc /mtrr			system_u:object_r:mtrr_device_t:s0
genfscon proc /net			system_u:object_r:proc_net_t:s0
genfscon proc /sysvipc			system_u:object_r:proc_t:s0
genfscon proc /sys			system_u:object_r:sysctl_t:s0
genfscon proc /sys/kernel		system_u:object_r:sysctl_kernel_t:s0
genfscon proc /sys/kernel/modprobe	system_u:object_r:sysctl_modprobe_t:s0
genfscon proc /sys/kernel/hotplug	system_u:object_r:sysctl_hotplug_t:s0
genfscon proc /sys/net			system_u:object_r:sysctl_net_t:s0
genfscon proc /sys/net/unix		system_u:object_r:sysctl_net_unix_t:s0
genfscon proc /sys/vm			system_u:object_r:sysctl_vm_t:s0
genfscon proc /sys/dev			system_u:object_r:sysctl_dev_t:s0
genfscon proc /net/rpc			system_u:object_r:sysctl_rpc_t:s0
genfscon proc /irq			system_u:object_r:sysctl_irq_t:s0

# rootfs
genfscon rootfs /			system_u:object_r:root_t:s0

# sysfs
genfscon sysfs /			system_u:object_r:sysfs_t:s0

# selinuxfs
genfscon selinuxfs /			system_u:object_r:security_t:s0

# autofs
genfscon autofs /			system_u:object_r:autofs_t:s0
genfscon automount /			system_u:object_r:autofs_t:s0

# usbdevfs
genfscon usbdevfs /			system_u:object_r:usbdevfs_t:s0

# iso9660
genfscon iso9660 /			system_u:object_r:iso9660_t:s0
genfscon udf /				system_u:object_r:iso9660_t:s0

# romfs
genfscon romfs /			system_u:object_r:romfs_t:s0
genfscon cramfs /			system_u:object_r:romfs_t:s0

# ramfs
genfscon ramfs /			system_u:object_r:ramfs_t:s0

# vfat, msdos
genfscon vfat /				system_u:object_r:dosfs_t:s0
genfscon msdos /			system_u:object_r:dosfs_t:s0
genfscon fat /				system_u:object_r:dosfs_t:s0
genfscon ntfs /				system_u:object_r:dosfs_t:s0

# samba
genfscon cifs /				system_u:object_r:cifs_t:s0
genfscon smbfs /			system_u:object_r:cifs_t:s0

# nfs
genfscon nfs /				system_u:object_r:nfs_t:s0
genfscon nfs4 /				system_u:object_r:nfs_t:s0
genfscon afs /				system_u:object_r:nfs_t:s0

genfscon debugfs /			system_u:object_r:debugfs_t:s0
genfscon inotifyfs /			system_u:object_r:inotifyfs_t:s0
genfscon hugetlbfs /			system_u:object_r:hugetlbfs_t:s0
genfscon capifs /			system_u:object_r:capifs_t:s0

# needs more work
genfscon eventpollfs / system_u:object_r:eventpollfs_t:s0
genfscon futexfs / system_u:object_r:futexfs_t:s0
genfscon bdev / system_u:object_r:bdev_t:s0
genfscon usbfs / system_u:object_r:usbfs_t:s0
genfscon nfsd / system_u:object_r:nfsd_fs_t:s0
genfscon rpc_pipefs / system_u:object_r:rpc_pipefs_t:s0
genfscon binfmt_misc / system_u:object_r:binfmt_misc_fs_t:s0

# FLASK

#
# Security contexts for network entities
# If no context is specified, then a default initial SID is used.
#

# Modified by Reino Wallin <reino@oribium.com>
# Multi NIC, and IPSEC features

# Modified by Russell Coker
# ifdefs to encapsulate domains, and many additional port contexts

#
# Port numbers (default = initial SID "port")
# 
# protocol number context
# protocol low-high context
#
portcon tcp 7 system_u:object_r:inetd_child_port_t:s0
portcon udp 7 system_u:object_r:inetd_child_port_t:s0
portcon tcp 9 system_u:object_r:inetd_child_port_t:s0
portcon udp 9 system_u:object_r:inetd_child_port_t:s0
portcon tcp 13 system_u:object_r:inetd_child_port_t:s0
portcon udp 13 system_u:object_r:inetd_child_port_t:s0
portcon tcp 19 system_u:object_r:inetd_child_port_t:s0
portcon udp 19 system_u:object_r:inetd_child_port_t:s0
portcon tcp 37 system_u:object_r:inetd_child_port_t:s0
portcon udp 37 system_u:object_r:inetd_child_port_t:s0
portcon tcp 113 system_u:object_r:auth_port_t:s0
portcon tcp 512 system_u:object_r:inetd_child_port_t:s0
portcon tcp 543 system_u:object_r:inetd_child_port_t:s0
portcon tcp 544 system_u:object_r:inetd_child_port_t:s0
portcon tcp 891 system_u:object_r:inetd_child_port_t:s0
portcon udp 891 system_u:object_r:inetd_child_port_t:s0
portcon tcp 892 system_u:object_r:inetd_child_port_t:s0
portcon udp 892 system_u:object_r:inetd_child_port_t:s0
portcon tcp 2105 system_u:object_r:inetd_child_port_t:s0
portcon tcp 20 system_u:object_r:ftp_data_port_t:s0
portcon tcp 21 system_u:object_r:ftp_port_t:s0
portcon tcp 22 system_u:object_r:ssh_port_t:s0
portcon tcp 23 system_u:object_r:telnetd_port_t:s0

portcon tcp 25 system_u:object_r:smtp_port_t:s0
portcon tcp 465 system_u:object_r:smtp_port_t:s0
portcon tcp 587 system_u:object_r:smtp_port_t:s0

portcon udp 500 system_u:object_r:isakmp_port_t:s0
portcon udp 53 system_u:object_r:dns_port_t:s0
portcon tcp 53 system_u:object_r:dns_port_t:s0

portcon udp 67  system_u:object_r:dhcpd_port_t:s0
portcon udp 647  system_u:object_r:dhcpd_port_t:s0
portcon tcp 647  system_u:object_r:dhcpd_port_t:s0
portcon udp 847  system_u:object_r:dhcpd_port_t:s0
portcon tcp 847  system_u:object_r:dhcpd_port_t:s0
portcon udp 68  system_u:object_r:dhcpc_port_t:s0
portcon udp 70 system_u:object_r:gopher_port_t:s0
portcon tcp 70 system_u:object_r:gopher_port_t:s0

portcon udp 69  system_u:object_r:tftp_port_t:s0
portcon tcp 79  system_u:object_r:fingerd_port_t:s0

portcon tcp 80  system_u:object_r:http_port_t:s0
portcon tcp 443  system_u:object_r:http_port_t:s0
portcon tcp 488  system_u:object_r:http_port_t:s0
portcon tcp 8008  system_u:object_r:http_port_t:s0

portcon tcp 106 system_u:object_r:pop_port_t:s0
portcon tcp 109 system_u:object_r:pop_port_t:s0
portcon tcp 110 system_u:object_r:pop_port_t:s0
portcon tcp 143 system_u:object_r:pop_port_t:s0
portcon tcp 220 system_u:object_r:pop_port_t:s0
portcon tcp 993 system_u:object_r:pop_port_t:s0
portcon tcp 995 system_u:object_r:pop_port_t:s0
portcon tcp 1109 system_u:object_r:pop_port_t:s0

portcon udp 111 system_u:object_r:portmap_port_t:s0
portcon tcp 111 system_u:object_r:portmap_port_t:s0

portcon tcp 119 system_u:object_r:innd_port_t:s0
portcon udp 123 system_u:object_r:ntp_port_t:s0

portcon tcp 137 system_u:object_r:smbd_port_t:s0
portcon udp 137 system_u:object_r:nmbd_port_t:s0
portcon tcp 138 system_u:object_r:smbd_port_t:s0
portcon udp 138 system_u:object_r:nmbd_port_t:s0
portcon tcp 139 system_u:object_r:smbd_port_t:s0
portcon udp 139 system_u:object_r:nmbd_port_t:s0
portcon tcp 445 system_u:object_r:smbd_port_t:s0

portcon udp 161 system_u:object_r:snmp_port_t:s0
portcon udp 162 system_u:object_r:snmp_port_t:s0
portcon tcp 199 system_u:object_r:snmp_port_t:s0
portcon udp 512 system_u:object_r:comsat_port_t:s0

portcon tcp 389 system_u:object_r:ldap_port_t:s0
portcon udp 389 system_u:object_r:ldap_port_t:s0
portcon tcp 636 system_u:object_r:ldap_port_t:s0
portcon udp 636 system_u:object_r:ldap_port_t:s0

portcon tcp 513 system_u:object_r:rlogind_port_t:s0
portcon tcp 514 system_u:object_r:rsh_port_t:s0

portcon tcp 515 system_u:object_r:printer_port_t:s0
portcon udp 514 system_u:object_r:syslogd_port_t:s0
portcon udp 517 system_u:object_r:ktalkd_port_t:s0
portcon udp 518 system_u:object_r:ktalkd_port_t:s0
portcon tcp 631 system_u:object_r:ipp_port_t:s0
portcon udp 631 system_u:object_r:ipp_port_t:s0
portcon tcp 88 system_u:object_r:kerberos_port_t:s0
portcon udp 88 system_u:object_r:kerberos_port_t:s0
portcon tcp 464 system_u:object_r:kerberos_admin_port_t:s0
portcon udp 464 system_u:object_r:kerberos_admin_port_t:s0
portcon tcp 749 system_u:object_r:kerberos_admin_port_t:s0
portcon tcp 750 system_u:object_r:kerberos_port_t:s0
portcon udp 750 system_u:object_r:kerberos_port_t:s0
portcon tcp 4444 system_u:object_r:kerberos_master_port_t:s0
portcon udp 4444 system_u:object_r:kerberos_master_port_t:s0
portcon tcp 783 system_u:object_r:spamd_port_t:s0
portcon tcp 540 system_u:object_r:uucpd_port_t:s0
portcon tcp 2401 system_u:object_r:cvs_port_t:s0
portcon udp 2401 system_u:object_r:cvs_port_t:s0
portcon tcp 873 system_u:object_r:rsync_port_t:s0
portcon udp 873 system_u:object_r:rsync_port_t:s0
portcon tcp 901 system_u:object_r:swat_port_t:s0
portcon tcp 953 system_u:object_r:rndc_port_t:s0
portcon tcp 1213 system_u:object_r:giftd_port_t:s0
portcon tcp 1241 system_u:object_r:nessus_port_t:s0
portcon tcp 1234 system_u:object_r:monopd_port_t:s0
portcon udp 1645 system_u:object_r:radius_port_t:s0
portcon udp 1646 system_u:object_r:radacct_port_t:s0
portcon udp 1812 system_u:object_r:radius_port_t:s0
portcon udp 1813 system_u:object_r:radacct_port_t:s0
portcon udp 1718 system_u:object_r:gatekeeper_port_t:s0
portcon udp 1719 system_u:object_r:gatekeeper_port_t:s0
portcon tcp 1721 system_u:object_r:gatekeeper_port_t:s0
portcon tcp 7000 system_u:object_r:gatekeeper_port_t:s0
portcon tcp 2040 system_u:object_r:afs_fs_port_t:s0
portcon udp 7000 system_u:object_r:afs_fs_port_t:s0
portcon udp 7002 system_u:object_r:afs_pt_port_t:s0
portcon udp 7003 system_u:object_r:afs_vl_port_t:s0
portcon udp 7004 system_u:object_r:afs_ka_port_t:s0
portcon udp 7005 system_u:object_r:afs_fs_port_t:s0
portcon udp 7007 system_u:object_r:afs_bos_port_t:s0
portcon tcp 1720 system_u:object_r:asterisk_port_t:s0
portcon udp 2427 system_u:object_r:asterisk_port_t:s0
portcon udp 2727 system_u:object_r:asterisk_port_t:s0
portcon udp 4569 system_u:object_r:asterisk_port_t:s0
portcon udp 5060 system_u:object_r:asterisk_port_t:s0
portcon tcp 2000 system_u:object_r:mail_port_t:s0
portcon tcp 2601 system_u:object_r:zebra_port_t:s0
portcon tcp 2628 system_u:object_r:dict_port_t:s0
portcon tcp 3306 system_u:object_r:mysqld_port_t:s0
portcon tcp 3632 system_u:object_r:distccd_port_t:s0
portcon udp 4011 system_u:object_r:pxe_port_t:s0
portcon udp 5000 system_u:object_r:openvpn_port_t:s0
portcon tcp 5323 system_u:object_r:imaze_port_t:s0
portcon udp 5323 system_u:object_r:imaze_port_t:s0
portcon tcp 5335 system_u:object_r:howl_port_t:s0
portcon udp 5353 system_u:object_r:howl_port_t:s0
portcon tcp 5222 system_u:object_r:jabber_client_port_t:s0
portcon tcp 5223 system_u:object_r:jabber_client_port_t:s0
portcon tcp 5269 system_u:object_r:jabber_interserver_port_t:s0
portcon tcp 5432 system_u:object_r:postgresql_port_t:s0
portcon tcp 5666 system_u:object_r:inetd_child_port_t:s0
portcon tcp 5703 system_u:object_r:ptal_port_t:s0
portcon tcp 50000 system_u:object_r:hplip_port_t:s0
portcon tcp 50002 system_u:object_r:hplip_port_t:s0
portcon tcp 5900  system_u:object_r:vnc_port_t:s0 
portcon tcp 5988  system_u:object_r:pegasus_http_port_t:s0
portcon tcp 5989  system_u:object_r:pegasus_https_port_t:s0
portcon tcp 6000  system_u:object_r:xserver_port_t:s0
portcon tcp 6001  system_u:object_r:xserver_port_t:s0
portcon tcp 6002  system_u:object_r:xserver_port_t:s0
portcon tcp 6003  system_u:object_r:xserver_port_t:s0
portcon tcp 6004  system_u:object_r:xserver_port_t:s0
portcon tcp 6005  system_u:object_r:xserver_port_t:s0
portcon tcp 6006  system_u:object_r:xserver_port_t:s0
portcon tcp 6007  system_u:object_r:xserver_port_t:s0
portcon tcp 6008  system_u:object_r:xserver_port_t:s0
portcon tcp 6009  system_u:object_r:xserver_port_t:s0
portcon tcp 6010  system_u:object_r:xserver_port_t:s0
portcon tcp 6011  system_u:object_r:xserver_port_t:s0
portcon tcp 6012  system_u:object_r:xserver_port_t:s0
portcon tcp 6013  system_u:object_r:xserver_port_t:s0
portcon tcp 6014  system_u:object_r:xserver_port_t:s0
portcon tcp 6015  system_u:object_r:xserver_port_t:s0
portcon tcp 6016  system_u:object_r:xserver_port_t:s0
portcon tcp 6017  system_u:object_r:xserver_port_t:s0
portcon tcp 6018  system_u:object_r:xserver_port_t:s0
portcon tcp 6019  system_u:object_r:xserver_port_t:s0
portcon tcp 6667 system_u:object_r:ircd_port_t:s0
portcon tcp 8000 system_u:object_r:soundd_port_t:s0
# 9433 is for YIFF
portcon tcp 9433 system_u:object_r:soundd_port_t:s0
portcon tcp 3128  system_u:object_r:http_cache_port_t:s0
portcon tcp 8080  system_u:object_r:http_cache_port_t:s0
portcon udp 3130  system_u:object_r:http_cache_port_t:s0
# 8118 is for privoxy
portcon tcp 8118  system_u:object_r:http_cache_port_t:s0

portcon udp 4041 system_u:object_r:clockspeed_port_t:s0
portcon tcp 8081 system_u:object_r:transproxy_port_t:s0
portcon udp 10080 system_u:object_r:amanda_port_t:s0
portcon tcp 10080 system_u:object_r:amanda_port_t:s0
portcon udp 10081 system_u:object_r:amanda_port_t:s0
portcon tcp 10081 system_u:object_r:amanda_port_t:s0
portcon tcp 10082 system_u:object_r:amanda_port_t:s0
portcon tcp 10083 system_u:object_r:amanda_port_t:s0
portcon tcp 60000 system_u:object_r:postgrey_port_t:s0

portcon tcp 10024 system_u:object_r:amavisd_recv_port_t:s0
portcon tcp 10025 system_u:object_r:amavisd_send_port_t:s0
portcon tcp 3310 system_u:object_r:clamd_port_t:s0
portcon udp 6276 system_u:object_r:dcc_port_t:s0
portcon udp 6277 system_u:object_r:dcc_port_t:s0
portcon udp 24441 system_u:object_r:pyzor_port_t:s0
portcon tcp 2703 system_u:object_r:razor_port_t:s0
portcon tcp 8021 system_u:object_r:zope_port_t:s0

# Defaults for reserved ports.  Earlier portcon entries take precedence;
# these entries just cover any remaining reserved ports not otherwise 
# declared or omitted due to removal of a domain.
portcon tcp 1-1023 system_u:object_r:reserved_port_t:s0
portcon udp 1-1023 system_u:object_r:reserved_port_t:s0

# Network interfaces (default = initial SID "netif" and "netmsg")
#
# interface netif_context default_msg_context
#

# Nodes (default = initial SID "node")
#
# address mask context
#
nodecon 127.0.0.1	  255.255.255.255			   system_u:object_r:node_lo_t:s0
nodecon 0.0.0.0		  255.255.255.255			   system_u:object_r:node_inaddr_any_t:s0
nodecon ::		  ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff  system_u:object_r:node_unspec_t:s0
nodecon ::1		  ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff  system_u:object_r:node_lo_t:s0
nodecon ff00::		  ff00::				   system_u:object_r:node_multicast_t:s0
nodecon fe80::		  ffff:ffff:ffff:ffff::			   system_u:object_r:node_link_local_t:s0
nodecon fec0::		  ffc0::				   system_u:object_r:node_site_local_t:s0
nodecon ::		  ffff:ffff:ffff:ffff:ffff:ffff::	   system_u:object_r:node_compat_ipv4_t:s0
nodecon ::ffff:0000:0000  ffff:ffff:ffff:ffff:ffff:ffff::	   system_u:object_r:node_mapped_ipv4_t:s0

# FLASK
