SETools - Policy analysis tools for SELinux (C) 2001-2006
Tresys Technology
setools@tresys.com, http://oss.tresys.com/setools


TABLE OF CONTENTS
-----------------

1. Overview
2. Installation
  2.1. compiling from official distribution
  2.2. compiling from SVN checkout
  2.3. configure flags
  2.4. using development version of SELinux
  2.5. Logwatch support
  2.6. doxygen support
3. Features
  3.1. graphical tools
  3.2. command-line tools
  3.3. analysis libraries
4. Obtaining SETools
5. Copyright License


1. Overview
-----------

This file describes SETools developed by Tresys Technology.  SETools
is comprised of a collection of graphical tools, command-line tools,
and support libraries.  Although SETools is primarily targeted for
Red Hat-based systems, it should also work for Gentoo and Debian
distributions.  See the file KNOWN-BUGS for testing information.

The directory structure of SETools is as follows:

  apol          Tcl/Tk-based policy analysis tool
  awish         customized wish interpreter
  libapol       policy analysis library
  libapol-tcl   bindings between apol and libapol
  libpoldiff    semantic policy difference library
  libqpol       library that abstracts policy internals
  libseaudit    seaudit support library
  libsefs       SELinux filesystem database library
  man           manual pages for SETools commands
  packages      miscellaneous support for external packages
  seaudit       audit log analysis tools: seaudit and seaudit-report
  sechecker     SELinux policy checking tool
  secmds        command line tools: seinfo, sesearch, findcon,
                replcon, indexcon, and searchcon
  sediff        semantic policy difference tools: sediff and sediffx

In addition the top-level source directory contains various
documentation.  Please consult the file KNOWN-BUGS prior to filing any
bug reports.

  
2. Installation
---------------

SETools uses the GNU build system to configure, compile, and install.
As such it contains a configure script that will verify its
dependencies.  SETools requires the following development packages for
compilation:
  flex
  bison
  pkg-config-0.20
  libselinux-1.30.27 or greater
  libsepol-1.12.26 or greater
  libxml-2.0

The following are not strictly required but highly recommended:
  tcl-8.4.9-devel or greater
  tk-8.4.9-devel or greater
  glib-1.2
  gtk+-2.0
  libglade-2.0

Apol requires BWidget-1.7 or greater to run.  The BWidget toolkit is
part of the tcllib package and is often not present in Linux
distributions.  The supplied configure script attempts to detect the
version of BWidget installed.  If it is not found then SETools will
use the prepackaged one found within the 'packages' subdirectory.


2.1. compiling from official distribution
-----------------------------------------

  $ cd setools-3.0
  $ ./configure
  $ make
  $ make install

This will put the binaries in /usr/local/bin, data files in
/usr/local/share/setool-3.0, and libraries in /usr/local/lib.
Assuming that /usr/local/bin is in your $PATH and /usr/local/lib in
$LD_LIBRARY_PATH everything should now work.


2.2. compiling from SVN checkout
--------------------------------

If you prefer the bleeding edge of SETools development you could
instead obtain the development version of SETools from the Subversion
repository (see Section 4).  You will need a recent version of
autoconf to create the configure script.  SETools was written using
autoconf-2.60, although autoconf-2.59 also seems to work correctly
albeit with a build warning.

  $ cd setools
  $ autoreconf
  $ ./configure
  $ make
  $ make install

As that SETools uses the GNU build system, other make targets are
available.  `make install-strip' will strip unneeded symbols from
installed binaries.  `make uninstall' removes files written by an
earlier install.


2.3. configure flags
--------------------

SETools may be built a number of ways depending upon the flags given
to `configure'.  Here is a list of notable options:


  --enable-debug
      This flag will cause all code to be compiled using static
      libraries and with the gcc flags '-g3 -gdwarf-2 -O0'.  This is
      useful for tracking down issues.

  --disable-gui
      Build only the command-line tools seinfo, sesearch, findcon,
      indexcon, replcon, searchcon, sechecker, and sediff.

  --disable-bwidget-check
      The configure script normally tries to launch a Tcl script that
      loads BWidget.  This will require a running X session.  Use this
      flag if you are compiling in a non-X environment; SETools will
      thus assume that BWidget 1.8 is installed on the system.

  --disable-selinux-check
      In rare circumstances the build computer will not have SELinux
      running.  As a result 'configure' will produce a warning and
      disable parts of SETools.  Use this flag to disable the
      build-time check.

  --enable-sefs
      In some situations SETools will be deployed on systems not
      running SELinux.  For example, sediff does not need an
      SELinux-enabled kernel to operate.  Disable sefs support (via
      --disable-sefs) if this situation applies.

  --enable-sepol-src=PATH
      Use this flag when compiling against a development version of
      SELinux; see Section 2.4.

  --with-tcl=PATH
      Look for Tcl development files in PATH.  This is needed for
      Debian users, where Tcl 8.4 is typically located at
      /usr/lib/tcl8.4.

  --with-tk=PATH
      Look for Tk development files in PATH.  This is needed for
      Debian users, where Tk 8.4 is typically located at
      /usr/lib/tk8.4.

  --with-sepol-devel=PATH
      Look for libsepol header files in PATH/include and library in
      PATH/lib.

  --with-selinux-devel=PATH
      Look for libselinux header files in PATH/include and library in
      PATH/lib.

  --with-default-policy=PATH
      Explicitly use PATH as the default SELinux policy source file,
      instead of inferring its location based upon the return value of
      selinux_policy_root().

Of course, `configure' accepts other usual flags such as --prefix.


2.4. using development version of SELinux
-----------------------------------------

SELinux is rapidly evolving project, such that the version of
libsepol.so installed to /usr/lib might not match the version of
libsepol.so under development.  SETools can be configured to compile
against a specific version of libsepol by way of the
--enable-sepol-src flag.  For example, suppose you have a SELinux SVN
checkout and compilation like so:

  $ cd /home/gburdell
  $ svn co https://svn.sourceforge.net/svnroot/selinux/trunk selinux
  $ cd selinux/libsepol
  $ make

You can now compile SETools against this particular copy of libsepol:

  $ cd /home/gburdell/setools
  $ ./configure --enable-sepol-src=/home/gburdell/selinux/libsepol

Note that --enable-sepol-src will override the flag
--with-sepol-devel.


2.5. Logwatch support
---------------------

SETools may be integrated into Logwatch by way of the seaudit-report
plugin by way of the `make install-logwatch' target.  This target
installs the configuration necessary for having seaudit-report run as
a Logwatch service.  These configuration files are provided with the
SETools source distribution and are located in the seaudit
subdirectory.  They are as follows:

  seaudit-report-group.conf:
      logfile group configuration file

  seaudit-report-service.conf:
      service filter config file

  seaudit-report-service:
      service filter script

Integrating the seaudit-report tool with Logwatch can provide an
effective IDS solution by automating customized audit reports and
having them emailed to a specific recipient(s) for further analysis.
You should make sure that the Logwatch program is installed before
proceeding with using this install target.


2.6. doxygen support
--------------------

All externally exported library functions use doxygen-style tags for
their documentation.  You may want to produce your own HTML outputs if
writing third-party tools.  A suggest doxygen configuration file
resides in packages/Doxyfile; it directs generated output to
/tmp/setools.  To use the file, from the top-level source directory
do:

  $ doxygen packages/Doxyfile


3. Features
-----------

SETools encompasses a number of tools and libraries.  Many of the
programs have help files that may be accessed during runtime.


3.1. graphical tools
--------------------

The main emphasis of SETools is the graphical analysis tools.

  apol:
      A Tcl/Tk graphical analysis tool.  Use it to open a SELinux
      policy, examine the policy's components and rules, and then
      perform various types of analyses.

  seaudit:
      A GTK+-based audit log analysis tool for SELinux.  This tool
      allows users to sort and filter the system's audit log, query
      the policy based on audit messages, as well as export audit log
      messages to a file.  It can also create reports in HTML or
      plain-text format using an entire audit log or an seaudit view.

  sediffx:
      A GTK+ frontend to libpoldiff.  Use sediffx to open two SELinux
      policies, find differences between them, and then show those
      results.

  awish:
      Customized wish interpreter specifically built against SETools
      libraries.  It is used to test features of apol.


3.2. command-line tools
-----------------------

Parts of SETools may be run in a non-windowing environment.  Within
the secmds subdirectory are the first six tools listed below; the rest
are in their own directories.

  seinfo:
      Tool to quickly get a list of components from a SELinux policy.

  sesearch:
      Tool to search rules (allow, type_transition, etc.) within a
      SELinux policy.

  findcon:
      Search the system's filesystem for files matching a certain
      search string.  The search string can specify complete security
      contexts, partial contexts, and shell globbing style wildcards.

  replcon:
      Search the filesystem, replacing a matched file's context with a
      different one.

  indexcon:
      Create a SQLite3 database that indexes the security contexts of
      a SELinux filesystem.

  searchcon:
      Query a database created by indexcon for specific pathnames
      and/or for pathnames whose label contains a particular type name
      and/or user name.

  sechecker:
      Command-line tool for performing modular checks on a SELinux
      policy.  Sechecker supports configuration profiles to specify
      multiple modules and generates a report of potential issues with
      a policy.

  seaudit-report:
      Command-line tool for generating reports on SE Linux audit
      messages in plain text or HTML format.  Reports generated by
      this tool can be configured to include standard report sections
      such as policy load messages, enforcement toggles messages,
      policy boolean messages, etc.  A key feature of the tool is that
      reports can be further customized through the use of saved
      seaudit view files.  This tool can effectively be used as a
      plugin to other audit log analysis tools, such as the Logwatch
      daemon.
    
 sediff:
      Command-line interface to libpoldiff.  Use sediff to load two
      SELinux policies, find differences between them, and then show
      those results.
 

3.3. analysis libraries
-----------------------

The SETools support libraries (libapol, libpoldiff, libqpol,
libseaudit, and libsefs) are available for third-party support.
Although they are not officially supported (and thus subject to change
between SETools releases), we will do our best to maintain
compatibility beginning with the SETools 3.0 release.

  libqpol:
      Abstracts the internals of a SELinux policy behind a consistent
      interface, such that changes to the policy representation (as
      governed by libsepol) do not affect analysis tools.

  libapol:
      Library that works with libqpol to actually perform higher-order
      analyses of a policy.  A typical sequence for an analysis tool
      is:

          open a policy via apol_policy_open()
          execute some query via apol/policy-query.h
          obtain detailed results via qpol/policy_query.h
          close the policy via apol_policy_destroy()

  libapol-tcl:
      Glue code that provides bindings between apol (a Tcl/Tk
      application) and libapol/libqpol.  The functions within are not
      meant to be used by anything else.

  libseaudit:
      Parse and store SELinux audit messages.  Its chief user is the
      seaudit tool.

  libsefs:
      Create a snapshot of SELinux filesystem security contexts and
      stores them into a SQLite3 database.  Routines exist to create
      and execute SQL queries into the database.  This library also
      has functions to parse the system's default file_contexts.
    
  libpoldiff:
      Accept two SELinux policies and finds differences between them.
      Its main users are sediff and sediffx.
    

4. Obtaining SETools
--------------------

Official releases of SETools may be freely downloaded from Tresys's
OSS website, http://oss.tresys.com/projects/setools.

SETools source code is maintained within a Subversion repository.
From the command line do:

  $ svn co http://oss.tresys.com/repos/setools/trunk/setools

You may also browse the SVN repository at
http://oss.tresys.com/projects/setools/browser.

Binary releases of SETools are available for your favorite Linux
packaging system.  Red Hat releases RPM builds regularly; use
rpmfind.net to find it.  Gentoo users have an ebuild script for
SETools.  Debian maintains the dpkg "setools" in section admin,
priority optional.


5. Copyright License
--------------------

The intent is to allow free use of this source code under the GNU
General Public License (see COPYING).  All source code is copyright
protected and freely distributed under the GNU GPL (see COPYING).
Absolutely no warranty is provided or implied (see COPYING).
